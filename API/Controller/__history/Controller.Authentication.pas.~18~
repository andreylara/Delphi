unit Controller.Authentication;

interface

uses
  System.SysUtils,
  Horse,
  JOSE.Core.JWT,
  JOSE.Core.JWS,
  JOSE.Core.JWK,
  JOSE.Core.JWA,
  JOSE.Types.JSON,
  Horse.BasicAuthentication;

var
  FCompact: string;

procedure BuildToken;
function VerifyToken(Login, Senha: String): Boolean;

implementation

uses
  JOSE.Core.Builder, Vcl.Dialogs;

procedure BuildToken;
var
  LToken: TJWT;
  LAlg: TJOSEAlgorithmId;
  Key: String;
begin
  LToken := TJWT.Create;
  Key := '';
  try
    LToken.Claims.Subject := 'Andrey Lara';
    LToken.Claims.IssuedAt := Now;
    LToken.Claims.Expiration := Now + 1;
    LToken.Claims.Issuer := 'Visual Software';

    LToken.Claims.SetClaimOfType<string>('nome', 'Andrey');
    LToken.Claims.SetClaimOfType<string>('senha', '123');
    LAlg := TJOSEAlgorithmId.HS256;

    Key := TJSONUtils.ToJSON(LToken.Claims.JSON.GetValue('nome')) + TJSONUtils.ToJSON(LToken.Claims.JSON.GetValue('senha'));
    FCompact := TJOSE.SerializeCompact(Key, LAlg, LToken);
  finally
    LToken.Free;
  end;
end;

function VerifyToken(Login, Senha: String): Boolean;
var
  LToken: TJWT;
  Key: String;
begin
  Result := False;
  Key := '"Andrey""123"';
  LToken := TJOSE.Verify(Key, FCompact);

  if Assigned(LToken) then
  begin
    try
      Result := LToken.Verified;
    finally
      LToken.Free;
    end;
  end;
end;

end.
